#!/usr/bin/env python
# encoding: utf-8

import json

from tornado.testing import (
    AsyncHTTPTestCase,
)
from tornado.websocket import websocket_connect
import zmq
from zmq.eventloop.ioloop import ZMQIOLoop

from spectator.app import (
    Application,
)

""" Functional tests for spectator tornado application. """


class SpectatorApplicationTest(AsyncHTTPTestCase):

    def setUp(self):
        self.agents_port = 5555
        super(SpectatorApplicationTest, self).setUp()

    def tearDown(self):
        # Shutdown spectator application after each tests to free up zmq ports
        self._app.shutdown()
        super(SpectatorApplicationTest, self).tearDown()

    def get_app(self):
        return Application(self.agents_port)

    def get_new_ioloop(self):
        # Use a ZMQ-compatible I/O loop so application's `ZMQStream` works.
        return ZMQIOLoop()

    def test_homepage(self):
        """ Test static web homepage gets rendered. """
        self.get_http_client()
        self.http_client.fetch(self.get_url('/'), self.stop)
        response = self.wait()
        self.assertEqual(response.code, 200)
        # test random content expected in response
        self.assertIn("inbox", response.body)

    def test_message_publishing(self):
        """ Validate the connection path between the agent, app and websocket
        client. The test simulate an agent sending messages to the main app.
        The app should process this message and distribute it to all connected
        websocket clients. """
        # Simulate a Websocket client connected to main app receiving messages
        # generated by agents
        websocket_connect('ws://127.0.0.1:%s/updatesocket' %
                          self.get_http_port(),
                          io_loop=self.io_loop,
                          callback=self.stop)
        session = self.wait().result()

        # PUSH zmq socket to simulate agent connecting to the app and sending
        # data
        context = zmq.Context()
        socket = context.socket(zmq.PUSH)
        socket.connect("tcp://127.0.0.1:%d" % self.agents_port)

        # Create a json test message and send it via zmq socket
        socket.send_json({"test": 123})

        # Validate message is received by websocket client
        session.read_message(self.stop)
        message = self.wait().result()
        message = json.loads(message)
        self.assertEqual(message['body'], json.dumps({"test": 123}))
        self.assertIn("id", message)
